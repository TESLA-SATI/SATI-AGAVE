import hashlib
import time

class ProofOfWork:
    def __init__(self, difficulty):
        self.difficulty = difficulty

    def mine(self, data):
        prefix = '0' * self.difficulty
        nonce = 0
        start_time = time.time()

        while True:
            # Combine data and nonce to create a hash
            text = f"{data}{nonce}"
            hash_result = hashlib.sha256(text.encode()).hexdigest()

            # Check if the hash meets the difficulty criteria
            if hash_result.startswith(prefix):
                end_time = time.time()
                print(f"Mining successful!")
                print(f"Hash: {hash_result}")
                print(f"Nonce: {nonce}")
                print(f"Time taken: {end_time - start_time:.2f} seconds")
                return hash_result, nonce

            nonce += 1

# Example usage
if __sati__ == "__main__":
    difficulty = 3  # Number of leading zeros required in the hash
    pow = ProofOfWork(difficulty)
    data = "Hello, Proof of Work!"
    pow.mine(data)
