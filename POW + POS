import hashlib
import random
import time

class Block:
    def __init__(self, index, previous_hash, timestamp, data, nonce=0):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.nonce = nonce
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        return hashlib.sha256(f"{self.index}{self.previous_hash}{self.timestamp}{self.data}{self.nonce}".encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.stakeholders = {}  # Address -> Stake

    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_stake(self, address, amount):
        if address in self.stakeholders:
            self.stakeholders[address] += amount
        else:
            self.stakeholders[address] = amount

    def proof_of_work(self, difficulty):
        latest_block = self.get_latest_block()
        nonce = 0
        while True:
            hash_attempt = hashlib.sha256(f"{latest_block.hash}{nonce}".encode()).hexdigest()
            if hash_attempt[:difficulty] == "0" * difficulty:
                return nonce, hash_attempt
            nonce += 1

    def proof_of_stake(self):
        total_stake = sum(self.stakeholders.values())
        if total_stake == 0:
            return None  # No stakeholders
        weighted_choice = random.uniform(0, total_stake)
        cumulative = 0
        for address, stake in self.stakeholders.items():
            cumulative += stake
            if cumulative >= weighted_choice:
                return address

    def add_block(self, data, difficulty=4):
        latest_block = self.get_latest_block()

        # Proof of Work
        nonce, pow_hash = self.proof_of_work(difficulty)

        # Proof of Stake
        selected_staker = self.proof_of_stake()
        if not selected_staker:
            print("No stakeholders available for Proof of Stake.")
            return

        # Create new block
        new_block = Block(len(self.chain), latest_block.hash, time.time(), data, nonce)
        self.chain.append(new_block)
        print(f"Block added by staker: {selected_staker}")

# Example Usage
blockchain = Blockchain()

# Add some stakeholders
blockchain.add_stake("Alice", 50)
blockchain.add_stake("Bob", 30)
blockchain.add_stake("Charlie", 20)

# Add blocks
blockchain.add_block("Block 1 Data")
blockchain.add_block("Block 2 Data")
blockchain.add_block("Block 3 Data")

# Print the blockchain
for block in blockchain.chain:
    print(f"Index: {block.index}, Hash: {block.hash}, Previous Hash: {block.previous_hash}, Data: {block.data}")    
